#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('garita:server');
var fs = require("fs");
var http = require('http');
var https = require('https');

var credentials = {
  key: fs.readFileSync("certificats/garita-key.pem").toString(),
  cert: fs.readFileSync("certificats/garita-cert.pem").toString()
};

//var httpServer = http.createServer(app);
var httpsServer = https.createServer(credentials, app);

//httpServer.listen(3000);
httpsServer.listen(6643); 	//On Linux (and, I believe, most other Unix-like operating systems), a service has to run as root to be able to bind to a port numbered less than 1024.



/**
 * Get port from environment and store in Express.
 */

//var port = process.env.PORT || '3000';
//app.set('port', port);

/**
 * Create HTTP server.
 */

//var server = app.listen(app.get("port"), function(){
//  debug("Express server escoltant pel port: " + server.address().port);
//});


//var serverSecure = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

// serverSecure.listen(8443, function(){
//   debug("**** Express serverSecure listening on port " + server.address().port);
// });

//server.on('error', onError);
//server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

// function normalizePort(val) {
//   var port = parseInt(val, 10);

//   if (isNaN(port)) {
//     // named pipe
//     return val;
//   }

//   if (port >= 0) {
//     // port number
//     return port;
//   }

//   return false;
// }

/**
 * Event listener for HTTP server "error" event.
 */

// function onError(error) {
//   if (error.syscall !== 'listen') {
//     throw error;
//   }

//   var bind = typeof port === 'string'
//     ? 'Pipe ' + port
//     : 'Port ' + port;

//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(bind + ' requires elevated privileges');
//       process.exit(1);
//       break;
//     case 'EADDRINUSE':
//       console.error(bind + ' is already in use');
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }

/**
 * Event listener for HTTP server "listening" event.
 */

// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }
